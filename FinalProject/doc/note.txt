Git log:

    Baseline:
        963ccd77caf361c9e79e1e81a27352b3d6cc15d5
    Branch predictor:
        7c76ca191e8be8ab436191fa2c4e6fe899dd3135
    Branch predictor & cache:
        70408b137adb52a41e76e5bd88801f7436fa657d
    Branch predictor & pipelined cache: 



make sim/simv
./run_verdi.sh &
make synth
make synth-gui

make run ASM=./testcode/self/cpu_reg.s
make run ASM=./testcode/self/cpu_inst_br_unsign.s
make run ASM=./testcode/self/cpu_inst_br_sign.s
make run ASM=./testcode/self/cpu_inst_ls.s
make run ASM=./testcode/self/cpu_inst_jp.s
make run ASM=./testcode/self/cpu_inst_u.s
make run ASM=./testcode/self/cache_writemiss_dirtyevict.s
make run ASM=./testcode/self/cache_maskls.s

make run ASM=./testcode/mp4-cp1.s
make run ASM=./testcode/mp4-cp2.s
make run ASM=./testcode/mp4-cp3.s

make run ASM=./testcode/comp1.s
make run ASM=./testcode/comp2_i.s
make run ASM=./testcode/comp3.s

Bug trace

    mp4-cp3.s:

    1. "2267a023: sw x6, FUN, x15" wrong addr
    -> x15 value incorrect, expect 0x44c but 0x7b4
    -> inst issued at 3845000
        - x15 dep_id = 0
        - rob_sr1_rdy = 1 (which might be wrong)
    -> Who lastly set x15? "00000797: auipc x15, 0x0" (id=0)
    -> Value 0x44c written to CDB in next cycle
    -> But 0x7b4 is written to CDB one cycle before it. Who wrote 0x7b4?
    -> ALU wrote 0x7b4 to id=0, corresponding instruction is "417: auipc x8,0x0" (id=0)
    -> But "417: auipc x8,0x0" should be flushed
    -> Since "417: auipc x8,0x0" is not stored in rob's register, the flush signal does not include it

    2. "0000c463: bgt x0, x1, T3", t=6085000, id=7, pc_wdata incorrect
    -> Inst issued at 5985000, x1 dep_id = 6
    -> Inst #6 written at 6070000
    -> opcode is set to 0

    3. "00229293: slli x5, x5, 0x2", t=200315000, id=2, rd_wdata incorrect (expect 0x80, write 0x20)
    -> Inst issued at 200255000, x5 dep_id = 1, in RS1[2]
    -> Imm value (opr2) is set to 20 at flush (t=200275000)
        - Someone write to #1
    
    4. "00221213: slli x4, x4, 0x2", t=650595000, id=7
        - rd_addr: expect 0x4 but 0x3
        - rd_wdata: expect 0x4a368 but 0x127e5
        - mem_addr: expect 0x11a0 but 0x0
    -> Inst issued at t=650465000, x4 dep_id = 1, in RS1[2]

    comp2_i.s:

    1. "00112623: sw x1, 12(x2)", t=690835000, id=7
        - pc_wdata: expect 0x2c0 but 0x348
        - mem_wmask: expect 0xf but 0x0
        - mem_addr: expect 0x83fffd2c but 0x0
        - mem_wdata: expect 0x354 but 0x0
    -> Inst issued at t=690765000, x2 dep_id=6, x1=0x354, in LSQ[1]
    -> CDB write val=0x83fffd20 to x2
        - Why commit_lsq_en last for two cycles?
            - Who set the isfinish of inst #7? CDB
                - Who write to the CDB? "fe9418e3: bne x8, x9, 1033c", which should be flushed

    comp3.s:

    1. "01851513: slli x10 ,x10 ,0x18", t=795000, id=5, cannot commit
    -> Inst issued at t=695000, x10 dep_id=4, in RS1[0]

    2. "00b6e863: bltu x13, x11, 0x1027c", t=2185000, id=3, cannot commit
    -> Inst issued at t=2115000, x13 dep_id=2, x11=0x5eb19, in RS2[0]

Global/PHT
7, 7: _  0.766809 _
6, 7: _ 0.751981 _ 

9, 6: _ 0.765802 _
9, 7: _ 0.766215 _ 

8, 3: 0.754605 0.806227 0.817875
8, 5: 0.789551 0.813979 0.839620
8, 6: 0.838807 0.794704 0.833390
8, 7: 0.842705 0.795155 0.833390

InstQ 4, RS 4+2+2:    0.754605 0.806190 | 724635000 3793015000 (sm error)| ?

L2 cache:
InstQ 8, RS 4+2+2:    0.754605 0.806152 0.814009 | 724355000 3745875000 3496625000 | ?
3745875000
sw(l1d)/sw(l2)
44/42: 1757505000
34/42: 1794495000
34/44: 2435805000
34/52: 1735515000

InstQ 8, RS 4+2+2:    0.754605 0.806152 0.814009 | 723635000 3793445000 3695145000 | 2.74
InstQ 8, RS 2+4+2:    0.744330 0.790869 0.814009 | 723695000 4045155000 3745275000 | ?
InstQ 8, RS 2+2+4:    0.744330 0.790869 0.814009 | 723695000 4045155000 3745275000 | ?
InstQ 8, RS 2*2+2+2:  0.754605 0.806152 0.806778 | 723725000 3796675000 3691035000 (sm error) | ?

InstQ 16, RS 8+4+4:   0.743309 0.781427 0.821070 | 724475000 4023335000 3428545000 | 2.74
InstQ 16, RS 2*4+4+4: 0.740671 0.783955 0.813361 | 724475000 4042955000 3605115000 | ?

InstQ 16, RS 16+8+8:  0.747391 0.783443 0.819128 | 724055000 4055945000 3600575000 | ?

-----------
no l2: 3793445000
l2 3/2: 3064085000
l2 4/2: 1807615000
l2 4/4: 2454965000
l2 4/8: 2454965000
-----------
l1d 3/2: 3789525000; 4/2: 3773405000
l1d 3/4: 3805595000; 4/4: 3773405000
l1d 3/8: 3805595000

comp2_i.s
l2 3/2: 3064065000
l2 4/2: 1807625000
l2 4/4: 2454895000
l2 4/8: 2454895000

l1 3/2, l2 4/2: 705505000 1807625000 1326315000


716525000 1735075000 1057055000

Final 1
714855000 1757455000 1057395000 5.06e+06

Final 2
714855000 1811035000 1268965000

